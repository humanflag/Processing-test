//import processing.core.PApplet;
//
///**
// * Created with IntelliJ IDEA.
// * User: mari
// * Date: 4/6/12
// * Time: 3:30 PM
// * DO NOT EDIT THIS FILE - CREATE A COPY OF IT
// *    See "public class SketchTemplate" above? This MUST be named the same as the file
// *    so if the new sketch file is named HumanFlag.java, the class must be named HumanFlag
// *    ... recommend right-clicking the class item in the file list to the right and doing Refactor: Copy
// *    ... and giving it a new name there, the thing is that the Refactor/Copy dialog only accepts valid names.
// * DOCS: http://www.slideshare.net/eskimoblood/processing-in-intellij
// * especially slide 22
// * To run sketches in IntelliJ, go to the Edit Configurations thing in the Run menu or toolbar
// *    ... and add as an APPLET - the sketch classes will be listed automatically
// */
//
//
//public class VectorBallTest extends PApplet {
//
//    // DO NOT EDIT THIS FILE - CREATE A COPY OF IT
//    //    See "public class SketchTemplate" above? This MUST be named the same as the file
//    //    so if the new sketch file is named HumanFlag.java, the class must be named HumanFlag
//    //    ... recommend right-clicking the class item in the file list to the right and doing Refactor: Copy
//    //    ... and giving it a new name there, the thing is that the Refactor/Copy dialog only accepts valid names.
//    // DOCS: http://www.slideshare.net/eskimoblood/processing-in-intellij
//    // especially slide 22
//    // To run sketches in IntelliJ, go to the Edit Configurations thing in the Run menu or toolbar
//    //    ... and add as an APPLET - the sketch classes will be listed automatically
//
//    // the normal Processing setup function.
//    // Needs to state the "public" keyword since we're doing this outside the Processing IDE
//        // - the Processing IDE does this automatically behind the scenes ...
//
//
//
//
//
//    public void setup() {
//        size(staerd,staerd);
//        smooth();
//        background(255);
//
//    }
//
//    public void draw() {
//        noStroke();
//        fill(255,10);
//        rect(0,0,width,height);
//
//        // Add the current speed to the location.
//        x = x + xspeed;
//        y = y + yspeed;
//
//        // Check for bouncing
//        if ((x > width) || (x < 0)) {
//            xspeed = xspeed * -1;
//        }
//        if ((y > height) || (y < 0)) {
//            yspeed = yspeed * -1;
//        }
//
//        // Display at x,y location
//        stroke(0);
//        fill(175);
//        ellipse(x,y,16,16);
//    }
//}
